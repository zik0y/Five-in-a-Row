{"ast":null,"code":"import{useState}from\"react\";// 方块组件\nimport{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function Square(_ref){let{value,onSquareClick,isWinningSquare}=_ref;return/*#__PURE__*/_jsx(\"button\",{className:\"square \".concat(value,\" \").concat(isWinningSquare?\"winning\":\"\"),onClick:onSquareClick,children:value});}// 棋盘组件\nfunction Board(_ref2){let{xIsNext,squares,lastMoveIndex,onPlay}=_ref2;function handleClick(i){if(calculateWinner(squares)||squares[i]){return;}const nextSquares=squares.slice();nextSquares[i]=xIsNext?\"X\":\"O\";onPlay(nextSquares,i);}const{winner,winningSquares}=calculateWinner(squares)||{};let status;if(winner){status=\"Winner: \"+winner;}else if(squares.every(Boolean)){status=\"Draw!\";}else{status=\"Next player: \"+(xIsNext?\"X\":\"O\");}const boardSize=15;const rows=Array.from({length:boardSize},(_,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:Array.from({length:boardSize},(_,colIndex)=>{const index=rowIndex*boardSize+colIndex;const isWinningSquare=winningSquares===null||winningSquares===void 0?void 0:winningSquares.includes(index);return/*#__PURE__*/_jsx(Square,{value:squares[index],onSquareClick:()=>handleClick(index),isLastMove:index===lastMoveIndex,isWinningSquare:isWinningSquare// Pass winning square info\n},index);})},rowIndex));return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:status}),rows]});}// 游戏组件\nexport default function Game(){const boardSize=15;const[history,setHistory]=useState([Array(boardSize*boardSize).fill(null)]);const[currentMove,setCurrentMove]=useState(0);const[lastMoveIndex,setLastMoveIndex]=useState(null);const xIsNext=currentMove%2===0;const currentSquares=history[currentMove];function handlePlay(nextSquares,index){const nextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);setLastMoveIndex(index);}function jumpTo(nextMove){setCurrentMove(nextMove);setLastMoveIndex(null);// 重置高亮\n}function resetGame(){setHistory([Array(boardSize*boardSize).fill(null)]);setCurrentMove(0);setLastMoveIndex(null);}const moves=history.map((squares,move)=>{let description;if(move>0){description=\"Go to move #\"+move;}else{description=\"Go to game start\";}return/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>jumpTo(move),children:description})},move);});return/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:/*#__PURE__*/_jsx(Board,{xIsNext:xIsNext,squares:currentSquares,lastMoveIndex:lastMoveIndex,onPlay:handlePlay})}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-info\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,children:\"Restart Game\"}),/*#__PURE__*/_jsx(\"ol\",{children:moves})]})]});}// 计算胜利者的函数\nfunction calculateWinner(squares){const boardSize=15;const lines=[];// 水平、垂直、对角线、反对角线检查\nfor(let row=0;row<boardSize;row++){for(let col=0;col<boardSize;col++){const index=row*boardSize+col;if(col<=boardSize-5){// 水平方向\nlines.push([index,index+1,index+2,index+3,index+4]);}if(row<=boardSize-5){// 垂直方向\nlines.push([index,index+boardSize,index+2*boardSize,index+3*boardSize,index+4*boardSize]);}if(row<=boardSize-5&&col<=boardSize-5){// 主对角线方向\nlines.push([index,index+boardSize+1,index+2*(boardSize+1),index+3*(boardSize+1),index+4*(boardSize+1)]);}if(row<=boardSize-5&&col>=4){// 反对角线方向\nlines.push([index,index+boardSize-1,index+2*(boardSize-1),index+3*(boardSize-1),index+4*(boardSize-1)]);}}}// 检查是否存在胜利的五子连珠\nfor(const[a,b,c,d,e]of lines){if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]&&squares[a]===squares[d]&&squares[a]===squares[e]){return{winner:squares[a],winningSquares:[a,b,c,d,e]// 返回获胜的方块索引\n};}}return null;}","map":{"version":3,"names":["useState","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Square","_ref","value","onSquareClick","isWinningSquare","className","concat","onClick","children","Board","_ref2","xIsNext","squares","lastMoveIndex","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","winningSquares","status","every","Boolean","boardSize","rows","Array","from","length","_","rowIndex","colIndex","index","includes","isLastMove","Game","history","setHistory","fill","currentMove","setCurrentMove","setLastMoveIndex","currentSquares","handlePlay","nextHistory","jumpTo","nextMove","resetGame","moves","map","move","description","lines","row","col","push","a","b","c","d","e"],"sources":["D:/web全栈开发作业/Five in a Row/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\n// 方块组件\nfunction Square({ value, onSquareClick, isWinningSquare }) {\n  return (\n    <button\n      className={`square ${value} ${isWinningSquare ? \"winning\" : \"\"}`}\n      onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\n// 棋盘组件\nfunction Board({ xIsNext, squares, lastMoveIndex, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    nextSquares[i] = xIsNext ? \"X\" : \"O\";\n    onPlay(nextSquares, i);\n  }\n\n  const { winner, winningSquares } = calculateWinner(squares) || {};\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else if (squares.every(Boolean)) {\n    status = \"Draw!\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  const boardSize = 15;\n  const rows = Array.from({ length: boardSize }, (_, rowIndex) => (\n    <div key={rowIndex} className=\"board-row\">\n      {Array.from({ length: boardSize }, (_, colIndex) => {\n        const index = rowIndex * boardSize + colIndex;\n        const isWinningSquare = winningSquares?.includes(index);\n        return (\n          <Square\n            key={index}\n            value={squares[index]}\n            onSquareClick={() => handleClick(index)}\n            isLastMove={index === lastMoveIndex}\n            isWinningSquare={isWinningSquare} // Pass winning square info\n          />\n        );\n      })}\n    </div>\n  ));\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {rows}\n    </>\n  );\n}\n\n// 游戏组件\nexport default function Game() {\n  const boardSize = 15;\n  const [history, setHistory] = useState([\n    Array(boardSize * boardSize).fill(null),\n  ]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [lastMoveIndex, setLastMoveIndex] = useState(null);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares, index) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setLastMoveIndex(index);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setLastMoveIndex(null); // 重置高亮\n  }\n\n  function resetGame() {\n    setHistory([Array(boardSize * boardSize).fill(null)]);\n    setCurrentMove(0);\n    setLastMoveIndex(null);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          xIsNext={xIsNext}\n          squares={currentSquares}\n          lastMoveIndex={lastMoveIndex}\n          onPlay={handlePlay}\n        />\n      </div>\n      <div className=\"game-info\">\n        <button onClick={resetGame}>Restart Game</button>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\n// 计算胜利者的函数\nfunction calculateWinner(squares) {\n  const boardSize = 15;\n  const lines = [];\n\n  // 水平、垂直、对角线、反对角线检查\n  for (let row = 0; row < boardSize; row++) {\n    for (let col = 0; col < boardSize; col++) {\n      const index = row * boardSize + col;\n\n      if (col <= boardSize - 5) {\n        // 水平方向\n        lines.push([index, index + 1, index + 2, index + 3, index + 4]);\n      }\n      if (row <= boardSize - 5) {\n        // 垂直方向\n        lines.push([\n          index,\n          index + boardSize,\n          index + 2 * boardSize,\n          index + 3 * boardSize,\n          index + 4 * boardSize,\n        ]);\n      }\n      if (row <= boardSize - 5 && col <= boardSize - 5) {\n        // 主对角线方向\n        lines.push([\n          index,\n          index + boardSize + 1,\n          index + 2 * (boardSize + 1),\n          index + 3 * (boardSize + 1),\n          index + 4 * (boardSize + 1),\n        ]);\n      }\n      if (row <= boardSize - 5 && col >= 4) {\n        // 反对角线方向\n        lines.push([\n          index,\n          index + boardSize - 1,\n          index + 2 * (boardSize - 1),\n          index + 3 * (boardSize - 1),\n          index + 4 * (boardSize - 1),\n        ]);\n      }\n    }\n  }\n\n  // 检查是否存在胜利的五子连珠\n  for (const [a, b, c, d, e] of lines) {\n    if (\n      squares[a] &&\n      squares[a] === squares[b] &&\n      squares[a] === squares[c] &&\n      squares[a] === squares[d] &&\n      squares[a] === squares[e]\n    ) {\n      return {\n        winner: squares[a],\n        winningSquares: [a, b, c, d, e], // 返回获胜的方块索引\n      };\n    }\n  }\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}